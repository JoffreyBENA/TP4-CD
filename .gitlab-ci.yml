stages:
  - setup
  - test
  - deploy

clone-repo:
  stage: setup
  image: ubuntu:latest
  before_script:
  - apt-get update && apt-get install -y git
  script:
    - git clone https://github.com/JoffreyBENA/python-api-handle-it.git app
  artifacts:
    paths:
      - ./app/

pylint-test:
  stage: test
  image: $IMAGE_OS
  script:
    - echo "Installing dependencies..."
    - apt-get update && apt-get install -y python3 python3-pip
    - python3 -m pip install --upgrade pip
    - pip install pylint pylint-json2html
    - echo "Running pylint..."
    - cd app
    - mkdir -p reports/pylint
    - pylint $(find . -name '*.py') > ./reports/pylint/report.json || exit 0
    - pylint-json2html -o ./reports/pylint/report.html ./reports/pylint/report.json
  artifacts:
    paths:
      - ./app/reports/pylint

unittest-test:
  stage: test
  image: $IMAGE_OS
  script:
    - echo "Installing dependencies..."
    - apt-get update && apt-get install -y python3 python3-pip
    - python3 -m pip install --upgrade pip
    - pip install html-testRunner
    - echo "Running unittest..."
    - cd app
    - python3 -m unittest $UNITTEST_FILE
  artifacts:
    paths:
      - ./app/reports/unittest/

radon-raw-test:
  stage: test
  image: $IMAGE_OS
  script:
    - echo "Installing dependencies..."
    - apt-get update && apt-get install -y python3 python3-pip
    - python3 -m pip install --upgrade pip
    - pip install radon json2tree
    - echo "Running radon raw..."
    - cd ./app
    - mkdir -p reports/raw
    - radon raw -j . > ./reports/raw/report.json || exit 0
    - json2tree -j ./reports/raw/report.json -t 1 > ./reports/raw/report.html || exit 0
  artifacts:
    paths:
      - ./app/reports/raw/

radon-cc-test:
  stage: test
  image: $IMAGE_OS
  script:
    - echo "Installing dependencies..."
    - apt-get update && apt-get install -y python3 python3-pip
    - python3 -m pip install --upgrade pip
    - pip install radon json2tree
    - echo "Running radon cc..."
    - cd ./app
    - mkdir -p reports/cc
    - radon cc -j . > ./reports/cc/report.json || exit 0
    - json2tree -j ./reports/cc/report.json -t 1 > ./reports/cc/report.html || exit 0
  artifacts:
    paths:
      - ./app//reports/cc/

build-image:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $DOCKER_USER -p $DOCKER_TOKEN $DOCKER_REGISTRY
  script:
    - echo "Building docker image..."
    - docker build -t $DOCKER_USER/$DOCKER_REPO:$DOCKER_IMAGE_VERSION -f $IMAGE_FILE .
    - echo "Pushing docker image..."
    - docker push $DOCKER_USER/$DOCKER_REPO:$DOCKER_IMAGE_VERSION
  artifacts:
    paths:
      - ./docker-app/python/